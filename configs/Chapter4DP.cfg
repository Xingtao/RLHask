# Dynamic Programming

enable
{ 
  bCarRental = true
  bGamblerProblem = true 
}

# Car Rental uses policy iteration (initially using stochastic policy):
#   policy evaluation (until converge) -> policy improvement -> policy evaluation -> ...
carRental
{
   ## 1. Take around 17minutes in a 4 cores I5 2.6GHz machine
   experiment = "figure 4.2"
   theta = 0.01 # converge criterion    
   discount = 0.9  
   # arrays here represent parameters in different locations
   maxCars = [20, 20]
   rentalCredit = [10.0, 10.0]
   transferCost = [2.0, 2.0]
   maxTransferCars = [5, 5]
   rentalCars = [3, 4]
   returnCars = [3, 2]
   freeParkingLimit = [50, 50]
   additionalParkingCost = [0.0, 0.0]
   additionalTransferSaving = [0.0, 0.0]   
   
   ## 2. For exercise 4.5, use following configuration options:
   # experiment = "exercise 4.5"
   # theta = 0.01
   # discount = 0.9
   # maxCars = [20, 20]
   # rentalCredit = [10.0, 10.0]
   # transferCost = [2.0, 2.0]
   # maxTransferCars = [5, 5]
   # rentalCars = [3, 4]
   # returnCars = [3, 2]
   # freeParkingLimit = [10, 10]
   # additionalParkingCost = [4.0, 4.0]
   # additionalTransferSaving = [2.0, 0.0]
         
   # Car Rental experiment can be extended to multiple locations cases by modifying configuration
   ## 3. For multiple locations case
   ##    Take around 20 hours for 3 locations with following parameters 
   # experiment = "multiple locations"
   # theta = 0.02
   # discount = 0.9
   # maxCars = [7, 8, 8]
   # rentalCredit = [10.0, 8.0, 9.0]
   # # transfer cost is simplified (from one Location A/B/C to any other location is the same)   
   # transferCost = [2.0, 2.0, 3.0] 
   # maxTransferCars = [3, 2, 2]
   # rentalCars = [3, 2, 2]
   # returnCars = [2, 2, 3]
   # freeParkingLimit = [10, 10, 10]
   # additionalParkingCost = [0.0, 0.0, 0.0]
   # additionalTransferSaving = [0.0, 0.0, 0.0]   
}

# Gambler Problem uses value iteration (combne policy evaluation & policy improvement in one sweep)
# Note: also use in-place update for state values
gambler
{
   goal = 100
   headProb = 0.4
   theta = 0.0001 # converge criteria
}